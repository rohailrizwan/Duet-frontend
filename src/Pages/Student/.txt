import { useState, useEffect } from "react";
import { useForm, useFieldArray } from "react-hook-form";
import {
    Box,
    Container,
    CssBaseline,
    ThemeProvider,
    createTheme,
    Stepper,
    Step,
    StepLabel,
    Typography,
    Button,
    Grid,
    TextField,
    Avatar,
    Card,
    CardContent,
    Divider,
    Paper,
    InputAdornment,
    IconButton,
    LinearProgress,
    Chip,
    CircularProgress,
} from "@mui/material";
import {
    Person,
    Email,
    Phone,
    Home,
    Description,
    LinkedIn,
    GitHub,
    School,
    MenuBook,
    AccountBalance,
    Work,
    EmojiEvents,
    Add,
    Delete,
    ChevronLeft,
    ChevronRight,
    Save,
    Upload,
    Psychology,
} from "@mui/icons-material";
import { useNavigate } from "react-router-dom";
// Import React PDF Renderer
import { Document, Page, Text, View, StyleSheet, pdf, Image } from "@react-pdf/renderer";
import UploadServices from "../../apis/Upload";
import { imagebaseUrl } from "../../Config/axios";
import resumeService from "../../apis/Studentresume";
import { ErrorToaster, SuccessToaster } from "../../Components/Toaster";





const styles = StyleSheet.create({
    page: {
        padding: 20,
        fontFamily: 'Helvetica',
        backgroundColor: '#f5f5f5',
    },
    header: {
        backgroundColor: '#34495e',
        padding: 15,
        marginBottom: 15,
        color: '#ffffff',
        flexDirection: 'row',
        alignItems: 'center',
    },
    profileImage: {
        width: 80,
        height: 80,
        borderRadius: 40,
        borderWidth: 2,
        borderColor: '#ffffff',
        marginRight: 15,
    },
    headerText: {
        fontSize: 20,
        fontWeight: 'bold',
    },
    headerSubText: {
        fontSize: 10,
        color: '#ecf0f1',
    },
    container: {
        flexDirection: 'row',
        justifyContent: 'space-between',
    },
    column: {
        width: '48%',
    },
    section: {
        backgroundColor: '#ffffff',
        padding: 10,
        marginBottom: 10,
        borderRadius: 5,
    },
    sectionTitle: {
        fontSize: 14,
        fontWeight: 'bold',
        color: '#34495e',
        marginBottom: 5,
        borderBottomWidth: 1,
        borderBottomColor: '#bdc3c7',
    },
    subSectionTitle: {
        fontSize: 12,
        fontWeight: 'bold',
        color: '#34495e',
        marginBottom: 3,
    },
    listItem: {
        fontSize: 10,
        color: '#7f8c8d',
        marginBottom: 2,
    },
});

const ResumePDF = ({ data, imageUrl }) => (
    <Document>
        <Page size="A4" style={styles.page}>
            {/* Header with Image */}
            <View style={styles.header}>
                <View>
                    {data.personalInfo.image && imageUrl && (
                        <Image
                            src={imageUrl || "/placeholder.svg"}
                            style={styles.profileImage}
                            onError={() => console.log('Image failed to load')}
                        />
                    )}
                </View>
                <View>
                    <Text style={styles.headerText}>{data.personalInfo.fullname}</Text>
                    <Text style={styles.headerSubText}>{data.personalInfo.email} | {data.personalInfo.phoneNum}</Text>
                    <Text style={styles.headerSubText}>{data.personalInfo.address}</Text>
                    <Text style={styles.headerSubText}>
                        LinkedIn: {data.personalInfo.linkedInUrl} | GitHub: {data.personalInfo.gitHubUrl}
                    </Text>
                </View>
            </View>

            {/* Two-column layout */}
            <View style={styles.container}>
                {/* Left Column */}
                <View style={styles.column}>
                    <View style={styles.section}>
                        <Text style={styles.sectionTitle}>Professional Summary</Text>
                        <Text style={styles.listItem}>{data.personalInfo.description}</Text>
                    </View>
                    <View style={styles.section}>
                        <Text style={styles.sectionTitle}>Work Experience</Text>
                        {data.workExperience.map((exp, index) => (
                            <View key={index} style={styles.subSectionTitle}>
                                <Text>{exp.companyName} - {exp.jobTitle}</Text>
                                <Text style={styles.listItem}>Duration: {exp.startDate} to {exp.endDate}</Text>
                                <Text style={styles.listItem}>Responsibilities: {exp.responsibilities}</Text>
                            </View>
                        ))}
                    </View>
                    <View style={styles.section}>
                        <Text style={styles.sectionTitle}>Education</Text>
                        <View>
                            <Text style={styles.subSectionTitle}>{data.educationalBackground.academicDetails.department}</Text>
                            <Text style={styles.listItem}>Enrollment: {data.educationalBackground.academicDetails.enrollNumber}</Text>
                            <Text style={styles.listItem}>Semester: {data.educationalBackground.academicDetails.semester}</Text>
                        </View>
                        <View>
                            <Text style={styles.subSectionTitle}>{data.educationalBackground.intermediateDetails.collegeName}</Text>
                            <Text style={styles.listItem}>Grade: {data.educationalBackground.intermediateDetails.grade}</Text>
                            <Text style={styles.listItem}>Passing Year: {data.educationalBackground.intermediateDetails.passingYear}</Text>
                        </View>
                        <View>
                            <Text style={styles.subSectionTitle}>{data.educationalBackground.matriculationDetails.schoolName}</Text>
                            <Text style={styles.listItem}>Grade: {data.educationalBackground.matriculationDetails.grade}</Text>
                            <Text style={styles.listItem}>Passing Year: {data.educationalBackground.matriculationDetails.passingYear}</Text>
                        </View>
                    </View>
                </View>

                {/* Right Column */}
                <View style={styles.column}>
                    <View style={styles.section}>
                        <Text style={styles.sectionTitle}>Skills</Text>
                        {data.educationalBackground.skills.map((skill, index) => (
                            <Text key={index} style={styles.listItem}>â€¢ {skill}</Text>
                        ))}
                    </View>
                    <View style={styles.section}>
                        <Text style={styles.sectionTitle}>Co-curricular Activities</Text>
                        {data.workExperience.map((exp, index) => (
                            <Text key={index} style={styles.listItem}>{exp.companyName}</Text>
                        ))}
                    </View>
                </View>
            </View>
        </Page>
    </Document>
);
// Create a custom theme with blue color scheme
const theme = createTheme({
    palette: {
        primary: {
            main: "#2156a8",
            light: "#4f7dcf",
            dark: "#163b75",
        },
        secondary: {
            main: "#1e88e5",
        },
        background: {
            default: "#f8f9fa",
        },
    },
    typography: {
        fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif',
    },
    components: {
        MuiButton: {
            styleOverrides: {
                root: {
                    borderRadius: 8,
                    textTransform: "none",
                },
            },
        },
        MuiCard: {
            styleOverrides: {
                root: {
                    borderRadius: 12,
                    boxShadow: "0px 4px 20px rgba(0, 0, 0, 0.08)",
                },
            },
        },
    },
});

// Steps for the resume builder
const steps = ["Personal Info", "Social Links", "Academic Detail", "Work Experience", "Co Activities"];

function CreateResume() {
    const [activeStep, setActiveStep] = useState(0);
    const [image, setImage] = useState(null);
    const [progress, setProgress] = useState(20);
    const [newSkill, setNewSkill] = useState("");
    const [skills, setSkills] = useState([]);
    const [loader, setloader] = useState(false);
    const [resumeData, setresumeData] = useState();
    const [formData, setFormData] = useState(null); // State to hold form data for PDF rendering
    const [pdfUrl, setPdfUrl] = useState(null); // State to hold the generated PDF URL
    const navigate = useNavigate();

    // Initialize react-hook-form
    const {
        register,
        handleSubmit,
        formState: { errors },
        control,
        trigger,
        setValue,
    } = useForm({
        defaultValues: {
            personalInfo: {
                image: null,
                fullname: "",
                email: "",
                phoneNum: "",
                dob: "",
                address: "",
                description: "",
                linkedInUrl: "",
                gitHubUrl: "",
            },
            educationalBackground: {
                academicDetails: {
                    enrollNumber: "",
                    department: "",
                    semester: "",
                },
                matriculationDetails: {
                    schoolName: "",
                    grade: "",
                    passingYear: "",
                },
                intermediateDetails: {
                    collegeName: "",
                    passingYear: "",
                    grade: "",
                },
                skills: [],
            },
            workExperience: [
                {
                    companyName: "",
                    jobTitle: "",
                    startDate: "",
                    endDate: "",
                    responsibilities: "",
                },
            ],
        },
    });

    const getData = async () => {
        try {
            const response = await resumeService?.getResume()
            if (response) {
                setresumeData(response?.data)
            }
        } catch (error) {
            console.log(error);

        }
    }
    useEffect(() => {
        getData()
    }, []);

    useEffect(() => {
        console.log(resumeData);
        if (resumeData) {
            setValue('personalInfo.fullname', resumeData?.personalInfo?.fullname)
            setValue('personalInfo.email', resumeData?.personalInfo?.email)
            setValue('personalInfo.phoneNum', resumeData?.personalInfo?.phoneNum)
            setValue('personalInfo.linkedInUrl', resumeData?.personalInfo?.linkedInUrl)
            setValue('personalInfo.gitHubUrl', resumeData?.personalInfo?.gitHubUrl)
            setValue('personalInfo.dob', convertToDateInputFormat(resumeData?.personalInfo?.dob))
            setValue('personalInfo.description', resumeData?.personalInfo?.description)
            setValue('personalInfo.address', resumeData?.personalInfo?.address)
            setValue('personalInfo.image', resumeData?.personalInfo?.image)
            setValue('educationalBackground.academicDetails.enrollNumber', resumeData?.educationalBackground?.academicDetails?.enrollNumber)
            setValue('educationalBackground.academicDetails.department', resumeData?.educationalBackground?.academicDetails?.department)
            setValue('educationalBackground.academicDetails.semester', resumeData?.educationalBackground?.academicDetails?.semester)
            setValue('educationalBackground.intermediateDetails.collegeName', resumeData?.educationalBackground?.intermediateDetails?.collegeName)
            setValue('educationalBackground.intermediateDetails.grade', resumeData?.educationalBackground?.intermediateDetails?.grade)
            setValue('educationalBackground.intermediateDetails.passingYear', resumeData?.educationalBackground?.intermediateDetails?.passingYear?.slice(0, 4))
            setValue('educationalBackground.matriculationDetails.schoolName', resumeData?.educationalBackground?.matriculationDetails?.schoolName)
            setValue('educationalBackground.matriculationDetails.passingYear', resumeData?.educationalBackground?.matriculationDetails?.passingYear?.slice(0, 4))
            setValue('educationalBackground.matriculationDetails.grade', resumeData?.educationalBackground?.matriculationDetails?.grade)
            setValue('educationalBackground.skills', resumeData?.educationalBackground?.skills)
            setSkills(resumeData?.educationalBackground.skills)
            setImage(resumeData?.personalInfo?.image)

        }
    }, [resumeData, setValue]);

    useEffect(() => {
        if (resumeData?.workExperience) {
            const formattedWorkExperience = resumeData.workExperience.map((exp) => ({
                ...exp,
                startDate: exp.startDate ? formatToYYYYMMDD(exp.startDate) : '',
                endDate: exp.endDate ? formatToYYYYMMDD(exp.endDate) : '',
            }));

            setValue('workExperience', formattedWorkExperience);
        }
    }, [resumeData, setValue]);

    const formatToYYYYMMDD = (dateString) => {
        const date = new Date(dateString);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0'); // 0-indexed
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    };



    // Field array for work experience
    const { fields, append, remove } = useFieldArray({
        control,
        name: "workExperience",
    });

    // Handle image upload
    const handleImageChange = (e) => {
        const file = e.target.files?.[0];
        if (file) {
            const reader = new FileReader();
            reader.onloadend = () => {
                setImage(reader.result);
            };
            reader.readAsDataURL(file);
            setValue("personalInfo.image", file);
        }
    };

    // Handle next button click with validation
    const handleNext = async () => {
        let isValid = true;

        if (activeStep === 0) {
            isValid = await trigger([
                "personalInfo.fullname",
                "personalInfo.email",
                "personalInfo.phoneNum",
                "personalInfo.dob",
                "personalInfo.address",
                "personalInfo.description",
            ]);
            if (!image) {
                ErrorToaster("Image is required");
                isValid = false;
            }
        } else if (activeStep === 1) {
            isValid = await trigger(["personalInfo.linkedInUrl", "personalInfo.gitHubUrl"]);
        } else if (activeStep === 2) {
            isValid = await trigger([
                "educationalBackground.academicDetails.enrollNumber",
                "educationalBackground.academicDetails.department",
                "educationalBackground.academicDetails.semester",
                "educationalBackground.matriculationDetails.schoolName",
                "educationalBackground.matriculationDetails.passingYear",
                "educationalBackground.matriculationDetails.grade",
                "educationalBackground.intermediateDetails.collegeName",
                "educationalBackground.intermediateDetails.passingYear",
                "educationalBackground.intermediateDetails.grade",
            ]);
        } else if (activeStep === 3) {
            for (let i = 0; i < fields.length; i++) {
                isValid = await trigger([
                    `workExperience.${i}.companyName`,
                    `workExperience.${i}.jobTitle`,
                    `workExperience.${i}.startDate`,
                    // `workExperience.${i}.endDate`,
                    `workExperience.${i}.responsibilities`,
                ]);
                if (!isValid) break;
            }
        } else if (activeStep === 4) {
            isValid = await trigger(["educationalBackground.skills"]);
            if (skills.length === 0) {
                ErrorToaster("At least one skill is required");
                isValid = false;
            }
        }

        if (isValid) {
            setActiveStep((prevStep) => prevStep + 1);
            setProgress((activeStep + 2) * 20);
        }
    };

    // Handle back button click
    const handleBack = () => {
        setActiveStep((prevStep) => prevStep - 1);
        setProgress(activeStep * 20);
    };


    const onSubmit = async (data) => {
        console.log(data);

        setloader(true);
        try {
            setFormData(data);

            // 1. Generate PDF blob
            const pdfDoc = <ResumePDF data={data} imageUrl={image} />;
            const blob = await pdf(pdfDoc).toBlob();


            const file = new File([blob], "resume.pdf", { type: "application/pdf" });

            // 4. Prepare FormData for upload
            const formDataImage = new FormData();
            typeof data?.personalInfo?.image !== 'string' && formDataImage.append("document", data?.personalInfo?.image);
            formDataImage.append("resume", file); // ðŸ‘ˆ Send as File, not Blob

            // 5. Upload file
            const responseImage = await UploadServices?.uploadImage(formDataImage);

            let imageUrl = '';
            let resume = '';
            if (responseImage) {
                imageUrl = responseImage?.url ? `${imagebaseUrl}/${responseImage?.url}` : data?.personalInfo?.image;
                resume = `${imagebaseUrl}/${responseImage.resumeUrl}`; // Get full URL from backend
            }
            setPdfUrl(resume)
            // 6. Create updated payload
            const updatedData = {
                ...data,
                personalInfo: {
                    ...data.personalInfo,
                    image: imageUrl || data.personalInfo.image,
                },
                resumeUrl: resume, // âœ… This now holds the uploaded PDF URL
            };

            // 7. Final API call
            const response = await resumeService?.createResume(updatedData);
            if (response) {
                SuccessToaster(response?.message || "Resume created successfully");
            }

            setloader(false);
        } catch (error) {
            console.error("Error generating PDF:", error);
            ErrorToaster("Failed to generate PDF. Please try again.");
            setloader(false);
        }
    };

    const handleKeyDown = (e) => {
        if (e.key === 'Enter' && activeStep !== steps.length - 1) {
            e.preventDefault();
            handleNext();
        } else if (e.key === 'Enter' && activeStep === steps.length - 1) {
            e.preventDefault();
            // Don't auto-submit, user must click the button
        }
    };


    // Personal Info Form
    const renderPersonalInfoForm = () => (
        <Box sx={{ py: 2 }}>
            <Box sx={{ display: "flex", flexDirection: "column", alignItems: "center", mb: 4 }}>
                <Avatar
                    src={image}
                    sx={{
                        width: 120,
                        height: 120,
                        mb: 2,
                        border: "4px solid #d0e1f9",
                        backgroundColor: "#e3f2fd",
                    }}
                >
                    {!image && <Person sx={{ fontSize: 60, color: "#2156a8" }} />}
                </Avatar>

                <Button
                    component="label"
                    variant="outlined"
                    startIcon={<Upload />}
                    sx={{
                        borderRadius: 2,
                        color: "#2156a8",
                        borderColor: "#2156a8",
                        "&:hover": {
                            borderColor: "#163b75",
                            backgroundColor: "#e3f2fd",
                        },
                    }}
                >
                    Upload Photo
                    <input type="file" hidden accept="image/*" onChange={handleImageChange} />
                </Button>
            </Box>

            <Grid container spacing={3}>
                <Grid item xs={12} md={6}>
                    <TextField
                        fullWidth
                        label="Full Name"
                        placeholder="John Doe"
                        variant="outlined"
                        InputProps={{
                            startAdornment: (
                                <InputAdornment position="start">
                                    <Person color="action" />
                                </InputAdornment>
                            ),
                        }}
                        error={!!errors.personalInfo?.fullname}
                        helperText={errors.personalInfo?.fullname?.message}
                        {...register("personalInfo.fullname", {
                            required: "Full name is required",
                            minLength: { value: 2, message: "Name must be at least 2 characters" },
                        })}
                    />
                </Grid>

                <Grid item xs={12} md={6}>
                    <TextField
                        fullWidth
                        label="Email"
                        placeholder="john.doe@example.com"
                        variant="outlined"
                        type="email"
                        InputProps={{
                            startAdornment: (
                                <InputAdornment position="start">
                                    <Email color="action" />
                                </InputAdornment>
                            ),
                        }}
                        error={!!errors.personalInfo?.email}
                        helperText={errors.personalInfo?.email?.message}
                        {...register("personalInfo.email", {
                            required: "Email is required",
                            pattern: {
                                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                                message: "Invalid email address",
                            },
                        })}
                    />
                </Grid>

                <Grid item xs={12} md={6}>
                    <TextField
                        fullWidth
                        label="Phone Number"
                        placeholder="+1 (555) 123-4567"
                        variant="outlined"
                        InputProps={{
                            startAdornment: (
                                <InputAdornment position="start">
                                    <Phone color="action" />
                                </InputAdornment>
                            ),
                        }}
                        error={!!errors.personalInfo?.phoneNum}
                        helperText={errors.personalInfo?.phoneNum?.message}
                        {...register("personalInfo.phoneNum", {
                            required: "Phone number is required",
                        })}
                    />
                </Grid>

                <Grid item xs={12} md={6}>
                    <TextField
                        fullWidth
                        label="Date of Birth"
                        type="date"
                        variant="outlined"
                        InputLabelProps={{ shrink: true }}
                        error={!!errors.personalInfo?.dob}
                        helperText={errors.personalInfo?.dob?.message}
                        {...register("personalInfo.dob", {
                            required: "Date of birth is required",
                        })}
                    />
                </Grid>

                <Grid item xs={12} md={12}>
                    <TextField
                        fullWidth
                        label="Address"
                        placeholder="123 Main St, City, Country"
                        variant="outlined"
                        InputProps={{
                            startAdornment: (
                                <InputAdornment position="start">
                                    <Home color="action" />
                                </InputAdornment>
                            ),
                        }}
                        error={!!errors.personalInfo?.address}
                        helperText={errors.personalInfo?.address?.message}
                        InputLabelProps={{ shrink: true }}
                        {...register("personalInfo.address", {
                            required: "Address is required",
                            minLength: { value: 5, message: "Address must be at least 5 characters" },
                        })}
                    />
                </Grid>

                <Grid item xs={12}>
                    <TextField
                        fullWidth
                        // label="Professional Summary"
                        placeholder="Write a short description about yourself and your professional background..."
                        variant="outlined"
                        multiline
                        rows={4}
                        InputLabelProps={{ shrink: true }}
                        error={!!errors.personalInfo?.description}
                        helperText={errors.personalInfo?.description?.message}
                        {...register("personalInfo.description", {
                            required: "Professional summary is required",
                            minLength: { value: 10, message: "Please provide a more detailed description" },
                        })}
                    />
                </Grid>
            </Grid>
        </Box>
    );

    // Social Links Form
    const renderSocialLinksForm = () => (
        <Box sx={{ py: 2 }}>
            <Box sx={{ textAlign: "center", mb: 4 }}>
                <Typography variant="h5" gutterBottom>
                    Connect Your Professional Profiles
                </Typography>
                <Typography variant="body1" color="text.secondary">
                    Add your social media profiles to enhance your resume
                </Typography>
            </Box>

            <Grid container spacing={3}>
                <Grid item xs={12}>
                    <TextField
                        fullWidth
                        label="LinkedIn Profile"
                        placeholder="https://linkedin.com/in/yourprofile"
                        variant="outlined"
                        InputProps={{
                            startAdornment: (
                                <InputAdornment position="start">
                                    <LinkedIn sx={{ color: "#0077b5" }} />
                                </InputAdornment>
                            ),
                        }}
                        error={!!errors.personalInfo?.linkedInUrl}
                        helperText={errors.personalInfo?.linkedInUrl?.message}
                        {...register("personalInfo.linkedInUrl", {
                            required: "LinkedIn URL is required",
                        })}
                    />
                </Grid>

                <Grid item xs={12}>
                    <TextField
                        fullWidth
                        label="GitHub Profile"
                        placeholder="https://github.com/yourusername"
                        variant="outlined"
                        InputProps={{
                            startAdornment: (
                                <InputAdornment position="start">
                                    <GitHub sx={{ color: "#333" }} />
                                </InputAdornment>
                            ),
                        }}
                        error={!!errors.personalInfo?.gitHubUrl}
                        helperText={errors.personalInfo?.gitHubUrl?.message}
                        {...register("personalInfo.gitHubUrl", {
                            required: "GitHub URL is required",
                        })}
                    />
                </Grid>
            </Grid>

            <Paper
                elevation={0}
                sx={{
                    p: 2,
                    mt: 4,
                    bgcolor: "#e3f2fd",
                    borderRadius: 2,
                }}
            >
                <Typography variant="body2" color="#2156a8">
                    <strong>Pro Tip:</strong> Adding your professional profiles can increase your visibility to potential
                    employers and showcase your work beyond what's in your resume.
                </Typography>
            </Paper>
        </Box>
    );

    // Academic Details Form
    const renderAcademicDetailsForm = () => (
        <Box sx={{ py: 2 }}>
            <Box sx={{ mb: 4 }}>
                <Box sx={{ display: "flex", alignItems: "center", mb: 2 }}>
                    <AccountBalance sx={{ color: "#2156a8", mr: 1 }} />
                    <Typography variant="h6">University Information</Typography>
                </Box>

                <Grid container spacing={3}>
                    <Grid item xs={12} md={4}>
                        <TextField
                            fullWidth
                            label="Enrollment Number"
                            placeholder="e.g., 2021CS1234"
                            variant="outlined"
                            InputLabelProps={{ shrink: true }}
                            error={!!errors.educationalBackground?.academicDetails?.enrollNumber}
                            helperText={errors.educationalBackground?.academicDetails?.enrollNumber?.message}
                            {...register("educationalBackground.academicDetails.enrollNumber", {
                                required: "Enrollment number is required",
                            })}
                        />
                    </Grid>

                    <Grid item xs={12} md={4}>
                        <TextField
                            fullWidth
                            label="Department"
                            placeholder="e.g., Computer Science"
                            InputLabelProps={{ shrink: true }}
                            variant="outlined"
                            error={!!errors.educationalBackground?.academicDetails?.department}
                            helperText={errors.educationalBackground?.academicDetails?.department?.message}
                            {...register("educationalBackground.academicDetails.department", {
                                required: "Department is required",
                            })}
                        />
                    </Grid>

                    <Grid item xs={12} md={4}>
                        <TextField
                            fullWidth
                            label="Semester"
                            placeholder="e.g., 5th"
                            InputLabelProps={{ shrink: true }}
                            variant="outlined"
                            error={!!errors.educationalBackground?.academicDetails?.semester}
                            helperText={errors.educationalBackground?.academicDetails?.semester?.message}
                            {...register("educationalBackground.academicDetails.semester", {
                                required: "Semester is required",
                            })}
                        />
                    </Grid>
                </Grid>
            </Box>

            <Divider sx={{ my: 4 }} />

            <Box sx={{ mb: 4 }}>
                <Box sx={{ display: "flex", alignItems: "center", mb: 2 }}>
                    <School sx={{ color: "#2156a8", mr: 1 }} />
                    <Typography variant="h6">Matriculation Details</Typography>
                </Box>

                <Grid container spacing={3}>
                    <Grid item xs={12} md={4}>
                        <TextField
                            fullWidth
                            label="School Name"
                            placeholder="e.g., ABC High School"
                            InputLabelProps={{ shrink: true }}
                            variant="outlined"
                            error={!!errors.educationalBackground?.matriculationDetails?.schoolName}
                            helperText={errors.educationalBackground?.matriculationDetails?.schoolName?.message}
                            {...register("educationalBackground.matriculationDetails.schoolName", {
                                required: "School name is required",
                            })}
                        />
                    </Grid>

                    <Grid item xs={12} md={4}>
                        <TextField
                            fullWidth
                            label="Passing Year"
                            placeholder="e.g., 2018"
                            InputLabelProps={{ shrink: true }}
                            variant="outlined"
                            error={!!errors.educationalBackground?.matriculationDetails?.passingYear}
                            helperText={errors.educationalBackground?.matriculationDetails?.passingYear?.message}
                            {...register("educationalBackground.matriculationDetails.passingYear", {
                                required: "Passing year is required",
                                pattern: {
                                    value: /^\d{4}$/,
                                    message: "Please enter a valid year",
                                },
                            })}
                        />
                    </Grid>

                    <Grid item xs={12} md={4}>
                        <TextField
                            fullWidth
                            label="Grade/Percentage"
                            placeholder="e.g., 95% or A+"
                            InputLabelProps={{ shrink: true }}
                            variant="outlined"
                            error={!!errors.educationalBackground?.matriculationDetails?.grade}
                            helperText={errors.educationalBackground?.matriculationDetails?.grade?.message}
                            {...register("educationalBackground.matriculationDetails.grade", {
                                required: "Grade is required",
                            })}
                        />
                    </Grid>
                </Grid>
            </Box>

            <Divider sx={{ my: 4 }} />

            <Box>
                <Box sx={{ display: "flex", alignItems: "center", mb: 2 }}>
                    <MenuBook sx={{ color: "#2156a8", mr: 1 }} />
                    <Typography variant="h6">Intermediate Details</Typography>
                </Box>

                <Grid container spacing={3}>
                    <Grid item xs={12} md={4}>
                        <TextField
                            fullWidth
                            label="College Name"
                            placeholder="e.g., XYZ Junior College"
                            InputLabelProps={{ shrink: true }}
                            variant="outlined"
                            error={!!errors.educationalBackground?.intermediateDetails?.collegeName}
                            helperText={errors.educationalBackground?.intermediateDetails?.collegeName?.message}
                            {...register("educationalBackground.intermediateDetails.collegeName", {
                                required: "College name is required",
                            })}
                        />
                    </Grid>

                    <Grid item xs={12} md={4}>
                        <TextField
                            fullWidth
                            label="Passing Year"
                            placeholder="e.g., 2020"
                            InputLabelProps={{ shrink: true }}
                            variant="outlined"
                            error={!!errors.educationalBackground?.intermediateDetails?.passingYear}
                            helperText={errors.educationalBackground?.intermediateDetails?.passingYear?.message}
                            {...register("educationalBackground.intermediateDetails.passingYear", {
                                required: "Passing year is required",
                                pattern: {
                                    value: /^\d{4}$/,
                                    message: "Please enter a valid year",
                                },
                            })}
                        />
                    </Grid>

                    <Grid item xs={12} md={4}>
                        <TextField
                            fullWidth
                            label="Grade/Percentage"
                            placeholder="e.g., 90% or A"
                            variant="outlined"
                            InputLabelProps={{ shrink: true }}
                            error={!!errors.educationalBackground?.intermediateDetails?.grade}
                            helperText={errors.educationalBackground?.intermediateDetails?.grade?.message}
                            {...register("educationalBackground.intermediateDetails.grade", {
                                required: "Grade is required",
                            })}
                        />
                    </Grid>
                </Grid>
            </Box>
        </Box>
    );

    // Work Experience Form
    const renderWorkExperienceForm = () => (
        <Box sx={{ py: 2 }}>
            <Box sx={{ textAlign: "center", mb: 4 }}>
                <Typography variant="h5" gutterBottom>
                    Work Experience
                </Typography>
            </Box>

            {fields.map((field, index) => (
                <Card
                    key={field.id}
                    sx={{
                        mb: 3,
                        border: "1px solid #bbdefb",
                        borderRadius: 2,
                    }}
                >
                    <CardContent>
                        <Box sx={{ display: "flex", justifyContent: "space-between", alignItems: "center" }}>
                            <Box sx={{ display: "flex", alignItems: "center" }}>
                                <Work sx={{ color: "#2156a8", mr: 1 }} />
                                <Typography variant="h6">Experience {index + 1}</Typography>
                            </Box>

                            <IconButton onClick={() => remove(index)} color="error" size="small">
                                <Delete />
                            </IconButton>
                        </Box>

                        <Grid container spacing={3}>
                            <Grid item xs={12} md={6}>
                                <TextField
                                    fullWidth
                                    label="Organization Name"
                                    placeholder="e.g., Acme Corporation"
                                    variant="outlined"
                                    error={!!errors.workExperience?.[index]?.companyName}
                                    helperText={errors.workExperience?.[index]?.companyName?.message}
                                    {...register(`workExperience.${index}.companyName`, {
                                        required: "Organization name is required",
                                    })}
                                />
                            </Grid>

                            <Grid item xs={12} md={6}>
                                <TextField
                                    fullWidth
                                    label="Your Role"
                                    placeholder="e.g., Software Engineer"
                                    variant="outlined"
                                    error={!!errors.workExperience?.[index]?.jobTitle}
                                    helperText={errors.workExperience?.[index]?.jobTitle?.message}
                                    {...register(`workExperience.${index}.jobTitle`, {
                                        required: "Job title is required",
                                    })}
                                />
                            </Grid>

                            <Grid item xs={12} md={6}>
                                <TextField
                                    fullWidth
                                    label="Start Date"
                                    type="date"
                                    variant="outlined"
                                    InputLabelProps={{ shrink: true }}
                                    error={!!errors.workExperience?.[index]?.startDate}
                                    helperText={errors.workExperience?.[index]?.startDate?.message}
                                    {...register(`workExperience.${index}.startDate`, {
                                        required: "Start date is required",
                                    })}
                                />
                            </Grid>

                            <Grid item xs={12} md={6}>
                                <TextField
                                    fullWidth
                                    label="End Date"
                                    type="date"
                                    variant="outlined"
                                    InputLabelProps={{ shrink: true }}
                                    // error={!!errors.workExperience?.[index]?.endDate}
                                    // helperText={errors.workExperience?.[index]?.endDate?.message}
                                    {...register(`workExperience.${index}.endDate`, {
                                        // required: "End date is required",
                                    })}
                                />
                            </Grid>

                            <Grid item xs={12}>
                                <TextField
                                    fullWidth
                                    label="Responsibilities & Achievements"
                                    placeholder="Describe your key responsibilities and achievements in this role..."
                                    variant="outlined"
                                    multiline
                                    rows={3}
                                    error={!!errors.workExperience?.[index]?.responsibilities}
                                    helperText={errors.workExperience?.[index]?.responsibilities?.message}
                                    {...register(`workExperience.${index}.responsibilities`, {
                                        required: "Responsibilities are required",
                                    })}
                                />
                            </Grid>
                        </Grid>
                    </CardContent>
                </Card>
            ))}

            <Button
                variant="outlined"
                startIcon={<Add />}
                onClick={() =>
                    append({
                        companyName: "",
                        jobTitle: "",
                        startDate: "",
                        endDate: "",
                        responsibilities: "",
                    })
                }
                fullWidth
                sx={{
                    mt: 2,
                    py: 1.5,
                    borderStyle: "dashed",
                    borderColor: "#bbdefb",
                    color: "#2156a8",
                    "&:hover": {
                        borderColor: "#2156a8",
                        backgroundColor: "#e3f2fd",
                    },
                }}
            >
                Add Another Experience
            </Button>
        </Box>
    );

    // Activities and Skills Form
    const renderActivitiesAndSkillsForm = () => {
        const addSkill = () => {
            if (newSkill.trim() !== "") {
                setSkills([...skills, newSkill.trim()]);
                setNewSkill("");
            }
        };

        const removeSkill = (indexToRemove) => {
            setSkills(skills.filter((_, index) => index !== indexToRemove));
        };

        const handleKeyPress = (e) => {
            if (e.key === "Enter") {
                e.preventDefault();
                addSkill();
            }
        };

        return (
            <Box sx={{ py: 2 }}>
                <Paper
                    elevation={0}
                    sx={{
                        p: 2,
                        mb: 4,
                        bgcolor: "#e3f2fd",
                        borderRadius: 2,
                    }}
                >
                    <Typography variant="body2" color="#2156a8">
                        Showcase your career-curricular activities and professional skills. This helps employers understand your
                        well-rounded personality and technical capabilities.
                    </Typography>
                </Paper>

                <Divider sx={{ my: 4 }} />

                <Box>
                    <Typography variant="h6" sx={{ mb: 2, display: "flex", alignItems: "center" }}>
                        <Psychology sx={{ color: "#2156a8", mr: 1, fontSize: 20 }} />
                        Professional Skills
                    </Typography>

                    <Box sx={{ display: "flex", gap: 1, mb: 2 }}>
                        <TextField
                            fullWidth
                            label="Add a Skill"
                            placeholder="e.g., JavaScript, React, Team Leadership"
                            variant="outlined"
                            value={newSkill}
                            onChange={(e) => setNewSkill(e.target.value)}
                            onKeyPress={handleKeyPress}
                            InputProps={{
                                endAdornment: (
                                    <InputAdornment position="end">
                                        <IconButton edge="end" onClick={addSkill} disabled={!newSkill.trim()}>
                                            <Add />
                                        </IconButton>
                                    </InputAdornment>
                                ),
                            }}
                        />
                    </Box>

                    <Box sx={{ display: "flex", flexWrap: "wrap", gap: 1, mb: 2 }}>
                        {skills.map((skill, index) => (
                            <Chip
                                key={index}
                                label={skill}
                                onDelete={() => removeSkill(index)}
                                color="primary"
                                variant="outlined"
                                sx={{ borderColor: "#2156a8", color: "#2156a8" }}
                            />
                        ))}
                    </Box>

                    {errors.educationalBackground?.skills && (
                        <Typography color="error" variant="caption" sx={{ display: "block", mt: 1 }}>
                            {errors.educationalBackground.skills.message}
                        </Typography>
                    )}

                    <input
                        type="hidden"
                        {...register("educationalBackground.skills", {
                            validate: (value) => (value && value.length > 0) || "Please add at least one skill",
                        })}
                    />
                </Box>
            </Box>
        );
    };

    // Render the current step content
    const getStepContent = (step) => {
        switch (step) {
            case 0:
                return renderPersonalInfoForm();
            case 1:
                return renderSocialLinksForm();
            case 2:
                return renderAcademicDetailsForm();
            case 3:
                return renderWorkExperienceForm();
            case 4:
                return renderActivitiesAndSkillsForm();
            default:
                return "Unknown step";
        }
    };

    const convertToDateInputFormat = (isoDate) => {
        if (!isoDate) return '';
        const date = new Date(isoDate);
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        return `${year}-${month}-${day}`;
    };
    return (
        <ThemeProvider theme={theme}>
            <CssBaseline />
            <Box
                sx={{
                    minHeight: "100vh",
                    backgroundColor: "#f8f9fa",
                    py: { xs: 2, sm: 4 },
                    px: { xs: 1, sm: 2 },
                }}
            >
                <Container maxWidth="lg">
                    <Card>
                        <Box
                            sx={{
                                p: { xs: 2, sm: 3 },
                                background: "linear-gradient(to right, #2156a8, #1e88e5)",
                                color: "white",
                                borderTopLeftRadius: 12,
                                borderTopRightRadius: 12,
                            }}
                        >
                            <Box sx={{ display: "flex", alignItems: "center", gap: 1, mb: 1 }}>
                                <Description />
                                <Typography variant="h4" component="h1" sx={{ fontSize: { xs: "1.5rem", sm: "2rem" } }}>
                                    Create Your Resume
                                </Typography>
                            </Box>
                            <Typography variant="body1" sx={{ opacity: 0.8 }}>
                                Build a professional resume in just a few steps
                            </Typography>
                            <LinearProgress
                                variant="determinate"
                                value={progress}
                                sx={{
                                    mt: 2,
                                    height: 8,
                                    borderRadius: 4,
                                    backgroundColor: "rgba(255, 255, 255, 0.2)",
                                    "& .MuiLinearProgress-bar": {
                                        backgroundColor: "white",
                                    },
                                }}
                            />
                        </Box>

                        <Box sx={{ p: { xs: 1, sm: 2 } }}>
                            <Stepper
                                activeStep={activeStep}
                                alternativeLabel
                                sx={{
                                    pt: 3,
                                    pb: 4,
                                    display: { xs: "none", sm: "flex" },
                                }}
                            >
                                {steps.map((label) => (
                                    <Step key={label}>
                                        <StepLabel>{label}</StepLabel>
                                    </Step>
                                ))}
                            </Stepper>

                            <Box sx={{ display: { xs: "block", sm: "none" }, textAlign: "center", py: 2 }}>
                                <Typography variant="body1" fontWeight="medium">
                                    Step {activeStep + 1} of {steps.length}: {steps[activeStep]}
                                </Typography>
                            </Box>
                        </Box>

                        <Divider />

                        <CardContent sx={{ p: { xs: 2, sm: 4 } }}>
                            <form onSubmit={(e) => e.preventDefault()} onKeyDown={handleKeyDown}>
                                {getStepContent(activeStep)}

                                {/* Display the PDF download link if generated */}
                                {pdfUrl && (
                                    <Box sx={{ mt: 2, textAlign: "center" }}>
                                        <Typography variant="body1" color="primary">
                                            <a href={pdfUrl} download={`${formData?.personalInfo.fullname}_Resume.pdf`}>
                                                Download your Resume PDF
                                            </a>
                                        </Typography>
                                    </Box>
                                )}

                                <Box
                                    sx={{
                                        display: "flex",
                                        flexDirection: { xs: "column", sm: "row" },
                                        justifyContent: "space-between",
                                        gap: { xs: 2, sm: 0 },
                                        mt: 4,
                                    }}
                                >
                                    <Button
                                        variant="outlined"
                                        onClick={handleBack}
                                        disabled={activeStep === 0}
                                        startIcon={<ChevronLeft />}
                                        fullWidth={window.innerWidth < 600}
                                    >
                                        Previous
                                    </Button>

                                    {activeStep === steps.length - 1 ? (
                                        <Button
                                            variant="contained"
                                            type="button"
                                            onClick={handleSubmit(onSubmit)}
                                            color="primary"
                                            endIcon={<Save />}
                                            fullWidth={window.innerWidth < 600}
                                        >
                                            {loader ? <CircularProgress color="white" size={12} /> : 'Submit Resume'}
                                        </Button>
                                    ) : (
                                        <Button
                                            variant="contained"
                                            onClick={handleNext}
                                            color="primary"
                                            endIcon={<ChevronRight />}
                                            fullWidth={window.innerWidth < 600}
                                        >
                                            Next
                                        </Button>
                                    )}
                                </Box>
                            </form>
                        </CardContent>
                    </Card>
                </Container>
            </Box>
        </ThemeProvider>
    );
}

export default CreateResume;